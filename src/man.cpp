#include <Arduino.h>
#include <EEPROM.h>
#include <MFRC522.h>
#include <RTClib.h>

#include "buzzer.h"

#define OLED_SPI_SPEED 4000000ul
#include <GyverOLED.h>

#include "GyverButton.h"

#define SCK_PIN 13   // not use in sketch
#define MISO_PIN 12  // not use in sketch
#define MOSI_PIN 11  // not use in sketch

#define SS_PIN 10
#define RST_PIN 9

#define LOCK_PIN 8
#define LED_1_PIN 7
#define LED_2_PIN 6
#define LED_3_PIN 5

#define BTN_UP_PIN 4
#define BTN_OK_PIN 3
#define BTN_DOWN_PIN 2

#define BUZZER_PIN A0

#define SDA_PIN A4
#define SCL_PIN A5

#define ADMIN_CARD_UID 2427348274
#define USER_CARD_COUNT 5
#define MENU_ITEM_COUNT 4

#define CARD_READER_PERIOD 500
#define UPDATE_TIME_PERIOD 1000
#define DISPLAY_WIDTH 128
#define DISPLAY_HEIGHT 64

GButton btnUp(BTN_UP_PIN);
GButton btnOk(BTN_OK_PIN);
GButton btnDown(BTN_DOWN_PIN);

Buzzer buzzer(BUZZER_PIN);

GyverOLED<SSD1306_128x64> oled;

MFRC522 mfrc522(SS_PIN, RST_PIN);

RTC_DS3231 rtc;

enum State {
    LOCK,
    CONFIGURATION,
    MANAGEMENT,
    DRIVE
};

const char item0[] PROGMEM = "Выход";
const char item1[] PROGMEM = "Блокировка";
const char item2[] PROGMEM = "ДХО";
const char item3[] PROGMEM = "Свет";
const char item4[] PROGMEM = "Подсветка";
const char item5[] PROGMEM = "Информация";

const char* const menu[] PROGMEM = {
    item0, item1, item2, item3, item4, item5};

bool selectedMenuItem = false;
int8_t currentMenuItem = -1;
int8_t countMenuItem;

const char sunday[] PROGMEM = "Воскресенье";
const char monday[] PROGMEM = "Понедельник";
const char tuesday[] PROGMEM = "Вторник";
const char wednesday[] PROGMEM = "Среда";
const char thursday[] PROGMEM = "Четверг";
const char friday[] PROGMEM = "Пятница";
const char saturday[] PROGMEM = "Суббота";

const char* const daysOfTheWeek[] PROGMEM = {
    sunday, monday, tuesday, wednesday, thursday, friday, saturday};
const uint8_t skill[] PROGMEM = {
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x7F,
    0x1F,
    0x1F,
    0x1F,
    0x0F,
    0x01,
    0x01,
    0x00,
    0x00,
    0x00,
    0x01,
    0x03,
    0x0F,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x0F,
    0x03,
    0x01,
    0x00,
    0x00,
    0x00,
    0x01,
    0x03,
    0x0F,
    0x1F,
    0x1F,
    0x1F,
    0x7F,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFC,
    0xF8,
    0xF0,
    0xF0,
    0xE0,
    0xE0,
    0xE0,
    0xE0,
    0xE0,
    0xE0,
    0xC0,
    0x80,
    0x00,
    0x03,
    0x07,
    0x0F,
    0x0F,
    0x0F,
    0x07,
    0x07,
    0x03,
    0x01,
    0x01,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x01,
    0x01,
    0x03,
    0x03,
    0x07,
    0x0F,
    0x1F,
    0x1F,
    0x1F,
    0x0F,
    0x07,
    0x03,
    0x00,
    0x80,
    0xC0,
    0xE0,
    0xE0,
    0xE0,
    0xE0,
    0xE0,
    0xE0,
    0xF0,
    0xF0,
    0xF8,
    0xFC,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x0F,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0C,
    0xFE,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x80,
    0x80,
    0x80,
    0x80,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x80,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x3F,
    0x00,
    0x00,
    0x00,
    0x3C,
    0xFE,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFE,
    0xFC,
    0x00,
    0x00,
    0x80,
    0x80,
    0x00,
    0x30,
    0xFC,
    0xFE,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFE,
    0x3C,
    0x00,
    0x00,
    0x00,
    0x3F,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xE0,
    0xC0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x01,
    0x03,
    0x03,
    0x03,
    0x03,
    0x03,
    0x01,
    0x01,
    0x00,
    0x1C,
    0x3F,
    0x3F,
    0x3F,
    0x3F,
    0x1C,
    0x00,
    0x01,
    0x01,
    0x03,
    0x03,
    0x03,
    0x03,
    0x03,
    0x81,
    0x81,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x60,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x3F,
    0x1F,
    0x0F,
    0x0F,
    0x07,
    0x07,
    0x07,
    0x07,
    0x07,
    0x07,
    0x03,
    0x01,
    0x00,
    0xC0,
    0xE0,
    0xF0,
    0xF8,
    0xFC,
    0xFE,
    0xFF,
    0xFE,
    0xE0,
    0x00,
    0x00,
    0x00,
    0xF0,
    0xF0,
    0x00,
    0x00,
    0x00,
    0xF0,
    0xF0,
    0x00,
    0x00,
    0x00,
    0xE0,
    0xF8,
    0x00,
    0x00,
    0x00,
    0xC0,
    0xFE,
    0xFF,
    0xFF,
    0xFF,
    0xFE,
    0xFC,
    0xF8,
    0xF0,
    0xE0,
    0xC0,
    0x00,
    0x01,
    0x03,
    0x07,
    0x07,
    0x07,
    0x07,
    0x07,
    0x07,
    0x0F,
    0x0F,
    0x1F,
    0x3F,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFE,
    0xFC,
    0xF8,
    0xF8,
    0xF0,
    0xC0,
    0x80,
    0x00,
    0x00,
    0x00,
    0x80,
    0xC0,
    0xF0,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFE,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFE,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFE,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xF0,
    0xC0,
    0x80,
    0x00,
    0x00,
    0x00,
    0x80,
    0x80,
    0xF0,
    0xF8,
    0xF8,
    0xFC,
    0xFE,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
};
const uint8_t locked[] PROGMEM = {
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x7F,
    0x3F,
    0x1F,
    0x0F,
    0x07,
    0x07,
    0x03,
    0x03,
    0x03,
    0x03,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x03,
    0x03,
    0x03,
    0x03,
    0x07,
    0x07,
    0x0F,
    0x1F,
    0x3F,
    0x7F,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x07,
    0x03,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xC0,
    0xF0,
    0xF8,
    0xFC,
    0xFE,
    0xFE,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFE,
    0xFE,
    0xFC,
    0xF8,
    0xF0,
    0xC0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x03,
    0x07,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xC0,
    0xC0,
    0xC0,
    0xC0,
    0xC0,
    0xC0,
    0xC0,
    0xFE,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFE,
    0xC0,
    0xC0,
    0xC0,
    0xC0,
    0xC0,
    0xC0,
    0xC0,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x3F,
    0x0F,
    0x07,
    0x03,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x01,
    0x03,
    0x07,
    0x0F,
    0x3F,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xC0,
    0xE0,
    0xE0,
    0xE0,
    0xE0,
    0xE0,
    0xE0,
    0xC0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x07,
    0x1F,
    0x1F,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x1F,
    0x1F,
    0x07,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1F,
    0x1F,
    0x1F,
    0x1F,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFC,
    0xF0,
    0xE0,
    0xC0,
    0xC0,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0x80,
    0xC0,
    0xC0,
    0xE0,
    0xF0,
    0xFC,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
    0xFF,
};

String temp;
String time;
String fullTime;
String weekDay;

uint32_t driveModeTimer = 0;
uint32_t updateTimeTimer = 0;
uint32_t cardReaderTimer = 0;
uint32_t resetDisplayToStateTimer = 0;

uint32_t resetDisplayToStatePeriod = 0;

unsigned long currentCardUID = 0;
unsigned long userCards[USER_CARD_COUNT];

uint8_t currentUserCardIndex;

int EEPROMstartAddr;
int currentCardIndex = 0;

const int eepromStartAddrUID = 0;
const int eepromStartAddrConfig = USER_CARD_COUNT * 5;

State currentState;

uint8_t configuration[MENU_ITEM_COUNT];

bool updateDisplay = true;

// functions declaration
void EEPROMwriteUIDcard();
void EEPROMreadUIDcard();
void EEPROMreadConfiguration();
void clearDisplay();
void unlockScooter();
void unknownCard();
void lockScooter();
boolean readUid();
void initCardAdresses();
void increaseCardAdresses();
void displayLock();
void displayUK();
void displayDrive();
void displayManagement();
void displayAdmin(uint8_t currentCardIndex);
void resetDisplayToStateAfterTimeout(uint32_t timeout = 1000);
void processDisplayToStateAfterTimeout();
void updateTime();
void needUpdateDisplay();
////////////////////////

void setup() {
    Serial.begin(9600);
    SPI.begin();
    mfrc522.PCD_Init();
    Wire.begin();
    oled.init();

    Serial.print(F("Compiled time: "));
    Serial.print(__DATE__);
    Serial.print(F(" "));
    Serial.println(__TIME__);

    if (!rtc.begin()) {
        Serial.println(F("Couldn't find RTC"));
        Serial.flush();
        abort();
    }

    if (rtc.lostPower()) {
        rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    }

    pinMode(LOCK_PIN, OUTPUT);
    pinMode(LED_1_PIN, OUTPUT);
    pinMode(LED_2_PIN, OUTPUT);
    pinMode(LED_3_PIN, OUTPUT);
    pinMode(SDA_PIN, OUTPUT);
    pinMode(SCL_PIN, OUTPUT);

    // инициализация пищалки
    digitalWrite(BUZZER_PIN, LOW);
    digitalWrite(BUZZER_PIN, HIGH);

    btnUp.setType(LOW_PULL);
    btnOk.setType(LOW_PULL);
    btnDown.setType(LOW_PULL);

    countMenuItem = *(&menu + 1) - menu;

    clearDisplay();
    lockScooter();
    EEPROMreadUIDcard();

    Serial.println(F("Saved cards: "));
    for (int i = 0; i < USER_CARD_COUNT; i++) {
        Serial.print(i + 1, DEC);
        Serial.print(F(" -> "));
        Serial.println(userCards[i]);
    }
}

void updateTime() {
    if (millis() - updateTimeTimer >= UPDATE_TIME_PERIOD) {
        updateTimeTimer = millis();
        DateTime now = rtc.now();
        String hourS = now.hour() < 10 ? "0" + String(now.hour()) : String(now.hour());
        String minuteS = now.minute() < 10 ? "0" + String(now.minute()) : String(now.minute());

        time = hourS + ":" + minuteS;
        fullTime = time + ":" + String(now.second()) + " " + String(now.day()) + "." + String(now.month()) + "." + String(now.year());

        char buffer[11];
        strcpy_P(buffer, (char*)pgm_read_word(&(daysOfTheWeek[now.dayOfTheWeek()])));
        weekDay = String(buffer);

        temp = String(rtc.getTemperature(), 2);
    }
}

void loop() {
    btnUp.tick();
    btnOk.tick();
    btnDown.tick();
    buzzer.buzzerProcessing();
    updateTime();
    processDisplayToStateAfterTimeout();
    switch (currentState) {
        case LOCK:
            displayLock();
            if (millis() - cardReaderTimer >= CARD_READER_PERIOD) {
                cardReaderTimer = millis();
                if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
                    needUpdateDisplay();
                    readUid();
                    if (currentCardUID == ADMIN_CARD_UID) {
                        currentState = CONFIGURATION;
                        initCardAdresses();
                        buzzer.on(3, 200);
                    } else {
                        for (int i = 0; i < USER_CARD_COUNT; i++) {
                            if (userCards[i] == currentCardUID) {
                                unlockScooter();
                                return;
                            }
                        }
                        unknownCard();
                    }
                }
            }
            break;
        case CONFIGURATION: {
            displayAdmin(currentCardIndex);
            if (millis() - cardReaderTimer >= CARD_READER_PERIOD) {
                cardReaderTimer = millis();
                if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
                    if (readUid()) {
                        EEPROMwriteUIDcard();
                    }
                }
            }
            break;
        }
        case MANAGEMENT: {
            displayManagement();
            break;
        }
        case DRIVE: {
            displayDrive();
            if (btnUp.isHold() && btnDown.isHold()) {
                needUpdateDisplay();
                currentState = MANAGEMENT;
                buzzer.on(10, 100);
                clearDisplay();
            }
            break;
        }
    }
}

void EEPROMwriteUIDcard() {
    clearDisplay();
    if (currentCardUID == ADMIN_CARD_UID) {
        oled.print(F("Карта #"));
        oled.println(currentCardIndex + 1, DEC);
        oled.println(F("пропущена"));
    } else {
        // "Card UID" / № карты - long, занимает 4 байта - нужно резать на 4 части EEPROM.
        EEPROM.write(EEPROMstartAddr, currentCardUID & 0xFF);
        EEPROM.write(EEPROMstartAddr + 1, (currentCardUID & 0xFF00) >> 8);
        EEPROM.write(EEPROMstartAddr + 2, (currentCardUID & 0xFF0000) >> 16);
        EEPROM.write(EEPROMstartAddr + 3, (currentCardUID & 0xFF000000) >> 24);

        oled.print(F("Карта #"));
        oled.println(currentCardIndex + 1, DEC);
        oled.println(F("записана"));
    }

    increaseCardAdresses();
    buzzer.on();

    if (currentCardIndex == USER_CARD_COUNT) {  // если записали все карты
        oled.invertText(true);
        oled.println(F(" Запись"));
        oled.println(F("окончена"));
        oled.invertText(false);
        EEPROMreadUIDcard();  // Запускаем функцию, для перезаписи массива userCards, данными из EEPROM.
        resetDisplayToStateAfterTimeout(2000);
        lockScooter();
    }
    oled.update();
}

void EEPROMreadUIDcard() {
    for (int i = 0; i < USER_CARD_COUNT; i++) {
        int eepromAddr = i * 5;
        byte val = EEPROM.read(eepromAddr + 3);
        userCards[i] = (userCards[i] << 8) | val;
        val = EEPROM.read(eepromAddr + 2);
        userCards[i] = (userCards[i] << 8) | val;
        val = EEPROM.read(eepromAddr + 1);
        userCards[i] = (userCards[i] << 8) | val;
        val = EEPROM.read(eepromAddr);
        userCards[i] = (userCards[i] << 8) | val;
    }
}

void EEPROMreadConfiguration() {
    for (int i = 0; i < MENU_ITEM_COUNT; i++) {
        int eepromAddr = i * 5;
        byte val = EEPROM.read(eepromAddr + 3);
        userCards[i] = (userCards[i] << 8) | val;
        val = EEPROM.read(eepromAddr + 2);
        userCards[i] = (userCards[i] << 8) | val;
        val = EEPROM.read(eepromAddr + 1);
        userCards[i] = (userCards[i] << 8) | val;
        val = EEPROM.read(eepromAddr);
        userCards[i] = (userCards[i] << 8) | val;
    }
}

void clearDisplay() {
    oled.home();
    oled.clear();
    oled.update();
}

void unlockScooter() {
    digitalWrite(LOCK_PIN, HIGH);
    currentState = DRIVE;
    buzzer.on(10, 100);
    clearDisplay();
}

void unknownCard() {
    displayUK();
    resetDisplayToStateAfterTimeout(2000);
    buzzer.on(1, 2000);
}

void lockScooter() {
    digitalWrite(LOCK_PIN, LOW);
    currentState = LOCK;
    buzzer.on(2, 300);
}

boolean readUid() {
    unsigned long tempCurrentCardUID = 0;
    currentCardUID = 0;
    for (byte i = 0; i < mfrc522.uid.size; i++) {
        tempCurrentCardUID = tempCurrentCardUID * 256 + mfrc522.uid.uidByte[i];
    }
    if (tempCurrentCardUID == currentCardUID) {
        return false;
    } else {
        currentCardUID = tempCurrentCardUID;
        return true;
    }
}

void initCardAdresses() {
    EEPROMstartAddr = 0;
    currentCardIndex = 0;
}

void increaseCardAdresses() {
    EEPROMstartAddr += 5;
    currentCardIndex = EEPROMstartAddr / 5;
}

void displayLock() {
    if (updateDisplay) {
        updateDisplay = false;
    } else {
        return;
    }
    clearDisplay();
    oled.drawBitmap(0, 0, locked, 128, 64, 1);
    oled.update();
}

void displayUK() {
    if (updateDisplay) {
        updateDisplay = false;
    } else {
        return;
    }
    clearDisplay();
    oled.drawBitmap(0, 0, skill, 128, 64, 1);
    oled.update();
}

void displayDrive() {
    if (millis() - driveModeTimer >= UPDATE_TIME_PERIOD) {
        driveModeTimer = millis();
        oled.home();
        oled.textMode(BUF_REPLACE);
        oled.setScale(2);
        oled.setCursor(30, 0);
        oled.println(time);
        oled.println();
        oled.println(F("В пути:"));
        uint32_t timeInRide = driveModeTimer / 60000;
        oled.print(timeInRide, DEC);
        oled.print(F(" мин."));
        oled.update();

        /*
        Секунда: 1.
Секунд: 0, 5, 6, 7, 8, 9.
Секунды: 2, 3, 4.
        */
    }
}

void displayManagement() {
    if (updateDisplay) {
        updateDisplay = false;
    } else {
        return;
    }
    oled.setScale(1);
    for (int8_t i = 0; i < countMenuItem; i++) {
        char buffer[11];
        oled.println(strcpy_P(buffer, (char*)pgm_read_word(&(menu[i]))));
    }

    oled.update();
}

void displayAdmin(uint8_t currentCardIndex) {
    if (updateDisplay) {
        updateDisplay = false;
    } else {
        return;
    }
    clearDisplay();
    oled.setScale(2);
    oled.println(F("Админка"));
    oled.println();
    oled.println(F("Запись"));
    oled.print(F("карты "));
    oled.print(currentCardIndex + 1, DEC);
    oled.print("/");
    oled.print(USER_CARD_COUNT, DEC);
    oled.update();
}

void resetDisplayToStateAfterTimeout(uint32_t timeout) {
    resetDisplayToStatePeriod = timeout;
    resetDisplayToStateTimer = millis();
}

void processDisplayToStateAfterTimeout() {
    if (resetDisplayToStateTimer != 0 && millis() - resetDisplayToStateTimer >= resetDisplayToStatePeriod) {
        resetDisplayToStateTimer = 0;
        needUpdateDisplay();
    }
}

void needUpdateDisplay() {
    updateDisplay = true;
}
